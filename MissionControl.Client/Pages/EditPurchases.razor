@page "/edit-purchase/{id:int}"
@using Microsoft.AspNetCore.Components
@attribute [Authorize]
@inject HttpClient Http
@inject TokenAuthenticationStateProvider TokenProvider
@inject PurchaseState PurchaseState
@inject NavigationManager NavigationManager
<style>
    .nopadding {
        padding: 0 !important;
        margin: 0 !important;
    }
</style>


<div class="row" style="margin-top: 5px;">
    <div class="col-sm-9">
        <h1 class="@MdcTypography.H4">Edit Purchase</h1>
    </div>
    <div class="col-sm-3">
        <MatButton Raised="true" OnClick="Back" Label="Back" Class="margin: 10px 0px 0px 0px;"></MatButton>
        <MatButton Raised="true" OnClick="@(e => { dialogIsAdd = true; })" Label="Add Item" Class="margin: 10px 0px 0px 0px;"></MatButton>
    </div>


</div>


@if (PurchaseState.Header == null)
{
    <MdcLinearProgress />
}
else
{
    <div class="mdc-card main-content-card">
        <div class="row">
            <div class="col-sm-4">
                <label class="control-label">Purchase No:</label>
                <MatTextField @bind-Value="PurchaseState.Header.PurchaseNo" Class="form-control text-box single-line"></MatTextField>
            </div>
            <div class="col-sm-4">
                <label class="control-label">Purchase Date:</label>
                <MatDatePicker @bind-Value="PurchaseState.Header.PurchaseDate" Format="yyyy-MM-dd" Class="form-control text-box"></MatDatePicker>
            </div>
            <div class="col-sm-4">
                <label class="control-label">Vendor:</label>
                <MatTextField @bind-Value="PurchaseState.Header.VendorId" Class="form-control text-box single-line"></MatTextField>
            </div>

        </div>
        <div class="row">

            <div class="col-md-4">
                <label class="control-label">Purchase Status:</label>
                <MatSelect @bind-Value="PurchaseState.Header.PurchaseStatusIdValue" Outlined="true">
                    <MatOptionString Value="0">All</MatOptionString>
                    <MatOptionString Value="10">Pending</MatOptionString>
                    <MatOptionString Value="20">Paid</MatOptionString>
                    <MatOptionString Value="30">Cancelled</MatOptionString>
                </MatSelect>
            </div>
            <div class="col-md-4">
                <label class="control-label">Total Crates:</label>
                <MatTextField @bind-Value="PurchaseState.Header.TotalCrates" Class="form-control"></MatTextField>
            </div>
            <div class="col-md-4" style="margin-top: 30px;">
                <MatButton Raised="true" OnClick="SavePurchase" Label="Save" Class="margin: 10px 0px 0px 0px;"></MatButton>
            </div>
        </div>
    </div>



    @*<EditForm Model="@PurchaseState.Header" OnValidSubmit="@ValidPurchase">
            <div class="mdc-card main-content-card">
                <div class="row">
                    <div class="col-sm-4">
                        <label class="control-label">Purchase No:</label>
                        <MatTextField @bind-Value="PurchaseState.Header.PurchaseNo" Class="form-control text-box single-line"></MatTextField>
                    </div>
                    <div class="col-sm-4">
                        <label class="control-label">Purchase Date:</label>
                        <MatDatePicker @bind-Value="purchaseDate" Format="yyyy-MM-dd" Class="form-control text-box"></MatDatePicker>
                    </div>
                    <div class="col-sm-4">
                        <label class="control-label">Vendor:</label>
                        <MatTextField @bind-Value="PurchaseState.Header.VendorId" Class="form-control text-box single-line"></MatTextField>
                    </div>

                </div>
                <div class="row">

                    <div class="col-md-4">
                        <label class="control-label">Purchase Status:</label>
                        <MatSelect @bind-Value="PurchaseState.Header.PurchaseStatusId" Outlined="true">
                            <MatOptionString Value="0">All</MatOptionString>
                            <MatOptionString Value="10">Pending</MatOptionString>
                            <MatOptionString Value="20">Paid</MatOptionString>
                            <MatOptionString Value="30">Cancelled</MatOptionString>
                        </MatSelect>
                    </div>
                    <div class="col-md-4">
                        <label class="control-label">Total Crates:</label>
                        <MatTextField @bind-Value="PurchaseState.Header.TotalCrates" Class="form-control"></MatTextField>
                    </div>
                    <div class="col-md-4">
                    </div>
                </div>
            </div>
        </EditForm>*@
}

@if (PurchaseState.Details != null)
{
    <table class="mdc-card">
        <thead>
            <tr>
                <th>Barcode#</th>
                <th>Product</th>
                <th>Weight (kg)</th>
                <th>Price (THB)</th>
                <th>No. of creates</th>
                <th>Total</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PurchaseState.Details.ToList())
            {
                <tr>
                    <td>@item.EAN</td>
                    <td>@item.ProductName</td>
                    <td>@item.WeightKg</td>
                    <td>@item.UnitPriceExclTaxValue</td>
                    <td>@item.PurchaseCrates</td>
                    <td>@item.SubTotalExclTaxValue</td>
                    <td>
                        <MatButton Raised="true" OnClick="@(e => { dialogIsDelete = true; })" Label="Delete" Class="margin: 10px 0px 0px 0px;"></MatButton>
                        <MatButton Raised="true" OnClick="@(e => beforeUpdateItem(item))" Label="Update" Class="margin: 10px 0px 0px 0px;"></MatButton>
                    </td>

                </tr>

            }
        </tbody>
    </table>

}

<MatDialog @bind-IsOpen="@dialogIsDelete">
    <MatDialogTitle>Confirmation</MatDialogTitle>
    <MatDialogContent>
        <p>Do you wich to delete this record?</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="() => DeleteItem(item.Id)">OK</MatButton>
        <MatButton OnClick="@(e => beforeDeleteItem(item.Id))">Cancel</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@dialogIsUpdate">
    <MatDialogTitle>Update Item</MatDialogTitle>
    <MatDialogContent>
        <div class="row">
            <div class="col-sm-6">
                <label class="control-label">Product:</label>
                <label class="form-control">@itemUpdate.ProductName</label>
            </div>
            <div class="col-sm-6">
                <label class="control-label">Weight (kg):</label>
                <MatTextField @bind-Value="itemUpdate.WeightKg" Class="form-control text-box"></MatTextField>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <label class="control-label">Price (THB):</label>
                <MatTextField @bind-Value="itemUpdate.UnitPriceExclTax" Class="form-control text-box"></MatTextField>
            </div>
            <div class="col-sm-6">
                <label class="control-label">No of crates:</label>
                <MatTextField @bind-Value="itemUpdate.PurchaseCrates" Class="form-control text-box "></MatTextField>
            </div>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="()=> UpdateItem(itemUpdate)">Save</MatButton>
        <MatButton OnClick="@(e => { dialogIsUpdate = false; })">Cancel</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@dialogIsAdd">
    <MatDialogTitle>Add Item</MatDialogTitle>
    <MatDialogContent>
        <div class="row">
            <div class="col-sm-6">
                <label class="control-label">Product:</label>
                <MatTextField @bind-Value="@item.ProductName" Class="form-control text-box"></MatTextField>
            </div>
            <div class="col-sm-6">
                <label class="control-label">Weight (kg):</label>
                <MatTextField @bind-Value="@item.WeightKg" Class="form-control text-box"></MatTextField>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <label class="control-label">Price (THB):</label>
                <MatTextField @bind-Value="@item.UnitPriceExclTax" Class="form-control text-box"></MatTextField>
            </div>
            <div class="col-sm-6">
                <label class="control-label">No of crates:</label>
                <MatTextField @bind-Value="@item.PurchaseCrates" Class="form-control text-box "></MatTextField>
            </div>
        </div>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@AddItem">Save</MatButton>
        <MatButton OnClick="@(e => { dialogIsAdd = false; })">Cancel</MatButton>
    </MatDialogActions>
</MatDialog>

@code {
    [Parameter]
    public int id { get; set; }
    public int itemDeleteId { get; set; }
    bool dialogIsDelete = false;
    bool dialogIsUpdate = false;
    bool dialogIsAdd = false;
    public DateTime purchaseDate;
    public PurchaseItemModel item = new PurchaseItemModel();
    public PurchaseItemModel itemUpdate = new PurchaseItemModel();

    protected override async Task OnInitializedAsync()
    {
        var token = await TokenProvider.GetTokenAsync();
        await PurchaseState.GetPurchaseAsync(id, token);
        purchaseDate = Convert.ToDateTime(PurchaseState.Header.PurchaseDateName);
        await PurchaseState.GetPurchaseItemsAsync(id, token);
    }

    async Task ValidPurchase()
    {

    }

    async Task SavePurchase()
    {

    }

    async Task AddItem()
    {
        var token = await TokenProvider.GetTokenAsync();
        var detailRequest = new PurchaseItemUpdateRequest
        {
            PurchaseId = item.PurchaseId,
            // ProductId = item.ProductId,
            ProductName = item.ProductName,
            PurchaseCrates = item.PurchaseCrates,
            UnitPriceExclTax = item.UnitPriceExclTax,
            WeightKg = item.WeightKg
        };
        await PurchaseState.AddPurchaseItemAsync(detailRequest, token);
        dialogIsUpdate = false;
    }

    void beforeUpdateItem(PurchaseItemModel item)
    {
        itemUpdate = item;
        dialogIsUpdate = true;
    }

    void beforeDeleteItem(int Id)
    {
        itemDeleteId = Id;
        dialogIsDelete = true;
    }

    async Task UpdateItem(PurchaseItemModel item)
    {
        var token = await TokenProvider.GetTokenAsync();
        var detailRequest = new PurchaseItemUpdateRequest
        {
            Id = item.Id,
            PurchaseId = item.PurchaseId,
            //ProductId = item.ProductId,
            ProductName = item.ProductName,
            PurchaseCrates = item.PurchaseCrates,
            UnitPriceExclTax = item.UnitPriceExclTax,
            WeightKg = item.WeightKg
        };
        await PurchaseState.UpdatePurchaseItemAsync(detailRequest, token);
        dialogIsUpdate = false;
    }
    void Back()
    {
        NavigationManager.NavigateTo("/purchases-list");
    }

    async Task DeleteItem(int id)
    {
        var token = await TokenProvider.GetTokenAsync();
        Console.WriteLine($"id:{id}");
        await PurchaseState.DeletePurchaseItemAsync(id, token);

    }
}
